import fs from 'fs';
import path from 'path';

export type ProfileName = 'local' | 'staging' | 'prod';

export type Profile = {
  LOCAL_DATABASE_URL?: string;
  SHADOW_DATABASE_URL?: string;
  DATABASE_URL?: string; // pooled
  DIRECT_URL?: string;   // direct
};

export type EnvState = {
  ACTIVE_PROFILE: ProfileName;
  profiles: Record<ProfileName, Profile>;
};

const ROOT_ENV = path.resolve(process.cwd(), '.env');

// Minimal .env parser that preserves only simple KEY=VALUE lines; comments are ignored
export function readDotEnv(): Record<string, string> {
  if (!fs.existsSync(ROOT_ENV)) return {};
  const text = fs.readFileSync(ROOT_ENV, 'utf8');
  const map: Record<string, string> = {};
  for (const rawLine of text.split(/\r?\n/)) {
    const line = rawLine.trim();
    if (!line || line.startsWith('#')) continue;
    const eq = line.indexOf('=');
    if (eq === -1) continue;
    const key = line.slice(0, eq).trim();
    const value = line.slice(eq + 1).trim();
    map[key] = value;
  }
  return map;
}

export function writeDotEnv(map: Record<string, string>) {
  const lines: string[] = [];
  // Add a small header
  lines.push('# Generated by local deployment app. Edit via UI.');
  lines.push('');
  const orderedKeys = Object.keys(map);
  for (const key of orderedKeys) {
    lines.push(`${key}=${map[key]}`);
  }
  fs.writeFileSync(ROOT_ENV, lines.join('\n'));
}

export function loadEnvState(): EnvState {
  const map = readDotEnv();
  const active = (map.ACTIVE_PROFILE as ProfileName) || 'local';
  const getProfile = (name: ProfileName): Profile => ({
    LOCAL_DATABASE_URL: map[`LOCAL_DATABASE_URL__${name}`] || '',
    SHADOW_DATABASE_URL: map[`SHADOW_DATABASE_URL__${name}`] || '',
    DATABASE_URL: map[`DATABASE_URL__${name}`] || '',
    DIRECT_URL: map[`DIRECT_URL__${name}`] || '',
  });
  return {
    ACTIVE_PROFILE: active,
    profiles: {
      local: getProfile('local'),
      staging: getProfile('staging'),
      prod: getProfile('prod'),
    },
  };
}

export function saveEnvState(state: EnvState) {
  // Start from existing .env to preserve unrelated keys (e.g., PG_DUMP_PATH)
  const out: Record<string, string> = { ...readDotEnv() };
  out.ACTIVE_PROFILE = state.ACTIVE_PROFILE;
  const writeProfile = (name: ProfileName, p: Profile) => {
    if (p.LOCAL_DATABASE_URL !== undefined)
      out[`LOCAL_DATABASE_URL__${name}`] = p.LOCAL_DATABASE_URL;
    if (p.SHADOW_DATABASE_URL !== undefined)
      out[`SHADOW_DATABASE_URL__${name}`] = p.SHADOW_DATABASE_URL;
    if (p.DATABASE_URL !== undefined) out[`DATABASE_URL__${name}`] = p.DATABASE_URL;
    if (p.DIRECT_URL !== undefined) out[`DIRECT_URL__${name}`] = p.DIRECT_URL;
  };
  writeProfile('local', state.profiles.local);
  writeProfile('staging', state.profiles.staging);
  writeProfile('prod', state.profiles.prod);

  writeDotEnv(out);
}

export function resolveRuntimeEnv(state: EnvState) {
  const p = state.profiles[state.ACTIVE_PROFILE];
  return {
    ACTIVE_PROFILE: state.ACTIVE_PROFILE,
    DATABASE_URL: p.DATABASE_URL || '',
    DIRECT_URL: p.DIRECT_URL || '',
    LOCAL_DATABASE_URL: p.LOCAL_DATABASE_URL || '',
    SHADOW_DATABASE_URL: p.SHADOW_DATABASE_URL || '',
  };
}
